services:

  avenirs-portfolio-api:
    container_name: ${AVENIRS_PORTFOLIO_API_CONTAINER_NAME}

    build:
      context: .
      dockerfile: ./Dockerfile-avenirs-portfolio-api
      args:
       AVENIRS_PORTFOLIO_API_VERSION: ${AVENIRS_PORTFOLIO_API_VERSION}
       OVERLAY_DIR: ${AVENIRS_PORTFOLIO_API_OVERLAY_BASENAME}
    restart: always
    ports:
      - "${AVENIRS_PORTFOLIO_API_CONTAINER_PORT}:10000"
    environment:
      - JASYPT_ENCRYPTOR_PASSWORD=${JASYPT_ENCRYPTOR_PASSWORD}
    depends_on:
      - postgresql-primary
      - avenirs-opensearch
    networks:
      - avenirs-api-network
    volumes:
      - srv-dev_file-storage:/workspace/app/target/storage

  avenirs-portfolio-security:
    container_name: ${AVENIRS_PORTFOLIO_SECURITY_CONTAINER_NAME}
   
    build:
      context: .
      dockerfile: ./Dockerfile-avenirs-portfolio-security
      args:
       AVENIRS_PORTFOLIO_SECURITY_VERSION: ${AVENIRS_PORTFOLIO_SECURITY_VERSION}
       OVERLAY_DIR: ${AVENIRS_PORTFOLIO_SECURITY_OVERLAY_BASENAME}
    restart: always
    ports:
      - "${AVENIRS_PORTFOLIO_SECURITY_CONTAINER_PORT}:12000"
    environment:
      - JASYPT_ENCRYPTOR_PASSWORD=${JASYPT_ENCRYPTOR_PASSWORD}
    depends_on:
      - postgresql-primary
    networks:
      - avenirs-api-network

  avenirs-cofolio-client:
    container_name: ${AVENIRS_COFOLIO_CLIENT_CONTAINER_NAME}
   
    build:
      context: ./avenirs-cofolio-client
      dockerfile: ../Dockerfile-avenirs-cofolio-client
      args:
       OVERLAY_DIR: ${AVENIRS_COFOLIO_CLIENT_OVERLAY_BASENAME}
    restart: always
    ports:
      - "${AVENIRS_COFOLIO_CLIENT_CONTAINER_PORT}:80"
    depends_on:
      - avenirs-portfolio-api
    networks:
      - avenirs-api-network

  avenirs-prometheus:
    image: prom/prometheus:latest
    container_name: ${AVENIRS_PROMETHEUS_CONTAINER_NAME}
    restart: always
    ports:
      - "${AVENIRS_PROMETHEUS_CONTAINER_PORT}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - avenirs-api-network

  avenirs-grafana:
    image: grafana/grafana:latest
    container_name: ${AVENIRS_GRAFANA_CONTAINER_NAME}
    restart: always
    ports:
      - "${AVENIRS_GRAFANA_CONTAINER_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - avenirs-prometheus
    networks:
      - avenirs-api-network

  avenirs-opensearch:
    image: opensearchproject/opensearch:latest
    container_name: avenirs-opensearch
    restart: always
    environment:
      - cluster.name=opensearch-cluster
      - plugins.security.disabled=true
      - discovery.type=single-node
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=OpensearchPassword0000? # TODO : sera modifier et chiffr√©
      - OPENSEARCH_USERNAME=admin
      - OPENSEARCH_PASSWORD=admin
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - ./opensearch/data:/usr/share/opensearch/data
    networks:
      - avenirs-api-network

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    restart: always
    ports:
      - 5601:5601
    environment:
      - 'OPENSEARCH_HOSTS=["http://avenirs-opensearch:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    depends_on:
      - avenirs-opensearch
    networks:
      - avenirs-api-network

  avenirs-valkey:
    image: valkey/valkey:latest
    container_name: avenirs-valkey
    restart: always
    ports:
      - "6379:6379"
    networks:
      - avenirs-api-network

networks: 
  avenirs-api-network:
    external: true
    name: ${AVENIRS_NETWORK}

volumes:
  srv-dev_file-storage:
    external: true